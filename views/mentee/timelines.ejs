<!DOCTYPE html>
<html lang="en" ng-app="myApp">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title><%= title%></title>
	<%- include('../partials/css_includes') %>

	<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>
<body>
	<div class="wrapper" ng-controller="myController">
		<div class="header">
			<div class="  row  container-fluid">
				<div >
					<%- include('../partials/header.ejs') %> 
				</div>
			</div>
		</div>
		<div class="container-fluid clearfix">
			<div class="row page-body">
				<div class="body-sections">
					<div class="navigation">
						<%- include('../partials/navigation.ejs') %>
					</div>
					<div class="timelines-body">
						<div class="section-head">
							<h3><img src="/css/images/folder.png" />{{problem.task_name}}</h3>
						</div>
						<div class="row">
							<%- include('../components/problem_statement_view_more') %>
						</div>
						<div class="row">
							<%- include('../components/timelines') %>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<%- include('../components/footer.ejs') %>
	<%- include('../partials/js_includes') %>
	<script type="text/javascript">
	</script>
	<!-- Button trigger modal -->
	<script type="text/javascript">
		
		myApp.controller('myController', ['$scope', 'myProfile', function($scope, myProfile){

			/* myProfile is a service defined in ng-controller.js for get Profile data. */
			myProfile.getProfile("<%= user._id %>", function(data) {
				$scope.$apply(function () {
					$scope.profile = data;
				})
			});

			$scope.repeat = [{
					deliverable: "", start_date: "", start_time: "", submission_date: "", submission_time: "",type:"",last_update: "Add versions", versions:[]
				},{
					deliverable: "", start_date: "", start_time: "", submission_date: "", submission_time: "",type:"",last_update: "Add versions", versions:[]
				},{
					deliverable: "", start_date: "", start_time: "", submission_date: "", submission_time: "",type:"",last_update: "Add versions", versions:[]
				},{
					deliverable: "", start_date: "", start_time: "", submission_date: "", submission_time: "",type:"",last_update:"Add versions", versions:[]
				}];
			
			$scope.calDur = function(startDate,startTime,submissionDate,submissionTime, $index) {
				if(startDate && startTime && submissionDate && submissionTime){
					var startDateStr = startDate.split('/');
					var startTimeStr = startTime.split('.');
					var subDateStr = submissionDate.split('/');
					var subTimeStr = submissionTime.split('.');
					var date2 = new Date(parseInt(subDateStr[2]), parseInt(subDateStr[1]), parseInt(subDateStr[0]),parseInt(subTimeStr[0]),parseInt(subTimeStr[1]));
				    var date1 = new Date(parseInt(startDateStr[2]), parseInt(startDateStr[1]), parseInt(startDateStr[0]),parseInt(startTimeStr[0]),parseInt(startTimeStr[1]));
				    var diffDays = (date2.getTime() - date1.getTime())/60000;
				    var days = parseInt((date2-date1) / (1000 * 3600 * 24));
				    if(startDate != submissionDate && parseInt(subTimeStr[0]) < parseInt(startTimeStr[0])){
				    	days=days+1;
				    }else if(startDate != submissionDate && parseInt(subTimeStr[0]) == parseInt(startTimeStr[0]) && parseInt(subTimeStr[1]) < parseInt(startTimeStr[1])){
				    	days=days+1;
				    }
				    diffDays= diffDays-(days*15*60);
				    var hours=parseInt(diffDays/60);
				    var minutes = diffDays%60;
				    var time=hours+'.'+minutes;
				    if (hours >= 0 && minutes>=0){
				    	return time;
				    } else {
				    	//alert('Your submission time is (' + submissionDate + ' ' +  submissionTime + ') before start time (' + startDate + ' ' +  startTime + ')');
				    }
				}
			};
			$scope.remove = function(index) {
				if($scope.repeat.length >3) {
					$scope.repeat.splice(index, 1)
				}
			};

			$scope.checkArtifact = function(artifact) {
				$scope.error = false;
				for (var i = 0; i < $scope.artifacts.length; i++) {
					if ($scope.artifacts[i].artifact == artifact) {
						$scope.error = true;
					};
				};
				if (!$scope.error) {
					$(event.target).addClass('error');
					$(event.target).attr("placeholder","Check artifact name");
				}
			};

			$scope.add = function() {
				$scope.repeat.push({
			        deliverable: "",
			        start_date: "",
			        start_time: "",
			        submission_date: "",
			        submission_time: "",
			        type : "",
			        last_update:new(Date)
			    });
				$(event.target).removeClass('error');
			};
			$scope.removeClass = function($event) {
				$(event.target).removeClass('error');
			};

			$scope.datePicker = function() {
				$(function() {
				    $( ".from" ).datepicker({
				      showOn: "button",
				      buttonImage: "/css/images/timelineicon.png",
				      changeMonth: true,
				      buttonImageOnly: true,
				      numberOfMonths: 1,
				      dateFormat:'dd/mm/yy',
				      
				    });
				    $( ".to" ).datepicker({
				      showOn: "button",
				      buttonImage: "/css/images/timelineicon.png",
				      buttonImageOnly: true,
				      numberOfMonths: 1,
				      dateFormat:'dd/mm/yy',
				      
				    });
				});
			}
			$scope.datePicker();
			$scope.total_duration = '00 hrs 00 mins';
			$scope.cal_total_duration = function() {
				var total_mins = 0;
				$("tr.timelines_row").each(function() {
					var value = $(this).find(".duration input").val();
					if(value){
						var array = value.split('.');
						var min = (parseInt(array[0])*60)+parseInt(array[1]);
						total_mins = total_mins+min;
						var hours=(parseInt(total_mins/60));
				    	var muinutes = (total_mins%60);
						hours1 = hours+' hrs '+muinutes + ' mins';
						$scope.total_duration = hours1;
					}
				});
				
			};

			$scope.getTaskById = function(task_id) {
				console.log(task_id);
				getTaskById(task_id,function(result){
					//console.log(result);
					$scope.$apply(function () {

			            $scope.problem = {
			            	"task_name" : result.task_name,
			            	"short_description" : htmlDecode(result.short_description),
			            	"description" : htmlDecode(result.task_details)
			            }
			        });
				});	
			}

			$scope.getTaskIdByNotificationId = function() {
				var id = '<%= notification_id %>';
				getTaskIdByNotificationId(id,function(result){
					console.log(result);
					$scope.$apply(function () {
			            $scope.task_id = result[0].task_id;
			            $scope.mentee_id = result[0].mentee_id;
			            $scope.mentor_id = result[0].mentor_id;
			            $scope.mentor_name = result[0].mentor_name;
			            $scope.taskId($scope.task_id);
			        });
				});	
			}

			$scope.taskId = function(task_id){
				$scope.task_id = task_id;
				console.log($scope.task_id);
				$scope.getTaskById(task_id);

			}

			$scope.setTimelines = function() {
				var id = '<%= notification_id %>';
				var repeat = [];
				console.log(id);
				deleteNotification(id);//This will deletes the new-project notification from notification collection.
				var data = {
					"name" : $scope.problem.task_name,
					"mentee_id": $scope.mentee_id,
					"mentor_id": $scope.mentor_id,
					"task_id": $scope.task_id,
					"project_status":"ongoing",
					"artifacts": $scope.repeat,
					"last_update": getDate(new Date()),
					"mentor" : $scope.mentor_name,
					"deadline" : $scope.repeat[$scope.repeat.length-1].submission_date + ' ' + $scope.repeat[$scope.repeat.length-1].submission_time
				};
				var notificationData = {
					"name": '<%= user.name %>',
					"image": "/css/images/vaibhav.png",
					"mentor_id": $scope.mentor_id,
					"message": "Started the " + $scope.problem.task_name + " project",
					"time": getDate(new Date()),
					"to": "instructor",
					"toMentor":"yes"
				};
				createProjectPassiveNotification(notificationData);
				
				//Invoke Add Task controller function.
				setTimelines(data,function(result){
					var result = result.replace(/['"]+/g, '');
					window.location.href = '/project_artifacts/' + result;
				});
			};

			/*var index = -1;
			$scope.select = function($event, $index) {
				if ($event.keyCode == 40) {
					index++;
					if (index > ($('.artifact-suggestions-block > div.artifact-suggestions').length)-1) {
						index = 0;
					}
					$('.selected-suggestion').removeClass('selected-suggestion');
					$('.artifact-suggestions-block > div.artifact-suggestions').eq( index ).addClass('selected-suggestion');
				} else if ($event.keyCode == 38) {
					index--;
					if (index < 0) {
						index = $('.artifact-suggestions-block > div.artifact-suggestions').length-1;
					}
					$('.selected-suggestion').removeClass('selected-suggestion');
					$('.artifact-suggestions-block > div.artifact-suggestions').eq( index ).addClass('selected-suggestion');
				} else if ($event.keyCode == 13) {
			        $scope.repeat[$index].deliverable = $('.selected-suggestion').text();
				}
			}*/

			$scope.getAllArtifactNames = function() {
				getAllArtifactNames(function(result){
					console.log(result);
					$scope.$apply(function () {
			            $scope.artifacts = result;
			        });
				});	
			}
			//$scope.getTaskById();
			$scope.getTaskIdByNotificationId();
			$scope.getAllArtifactNames();

		}]);
	</script>
</body>
</html>
